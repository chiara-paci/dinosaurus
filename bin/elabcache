#!/bin/bash

DNS_BASE_DIR=/home/chiara/dinosaurus

#### file richiamati

L_WINDOWS_CONVERTI_AWK=$DNS_BASE_DIR/lib/awk/windows_converti.awk
L_WINDOWS_BONIFICA_AWK=$DNS_BASE_DIR/lib/awk/windows_bonifica.awk
L_NMAP_OS_AWK=$DNS_BASE_DIR/lib/awk/nmap_os.awk
L_PARSE_VIEW=$DNS_BASE_DIR/bin/parse_view.py
L_WINEXE=$DNS_BASE_DIR/bin/winexe

VAR_SPOOL=$DNS_BASE_DIR/var/spool

export PYTHONPATH=$PYTHONPATH:$DNS_BASE_DIR

#### optparse

fase_download=""
fase_linux=""
fase_windows=""
fase_parse=""
fase_cmdb=""
fase_virtualhost=""
fase_vlans=""

function help {
    echo "$0 -h | "
    echo "$0 [ -P ] [ -W ] [ -D ] [ -L ] [ -C ] [ -H ] [ -V ] <fconf>"
    echo
    echo "-D: fase download"
    echo "-L: fase linux"
    echo "-W: fase windows"
    echo "-P: fase parse"
    echo "-C: fase cmdb"
    echo "-H: fase virtual host"
    echo "-V: fase vlans"
}

while getopts "hDLWPSNCHVZ" opzione
do
    case $opzione in
	h) help;exit;;
	D) fase_download="yes";;
	L) fase_linux="yes";;
	W) fase_windows="yes";;
	P) fase_parse="yes";;
	C) fase_cmdb="yes";;
	H) fase_virtualhost="yes";;
	V) fase_vlans="yes";;
    esac
done

set -e 

fconf="${!OPTIND}"

### Configurazione dell'elaborazione

if [ "$fconf" ]
then
    . "$fconf"
else
    echo "Manca configurazione"
    exit 1
fi

OUT_SPOOL=$OUT_DIR/spool
OUT_PREFIX=$OUT_SPOOL/elab

#mkdir -p $OUT_SPOOL

###################################################################################

if [ "$fase_vlans" ]
then
    echo "Estraggo dal DB delle vlan"
    echo "select * from vlan" | \
	mysql -t -D $VLANS_DB -h $VLANS_HOST -C -u $VLANS_USER --skip-secure-auth -p$VLANS_PWD | \
	tail -n +4 | head -n -1 | sed 's/^| *//g' | sed 's/ *|$//g' | sed 's/ *| */|/g' | sed 's/|NULL/|/g' | \
	awk -F'|' '{
                 split($1,netmask,".");
                 mask=0;
                 for (n in netmask) {
                     mask=mask+8-log(256-netmask[n])/log(2);
                 };
                 printf("%s:%s:%s:%s:%s:%s:%s\n",$2,mask,$3,$4,$5,$6,$7);
             }' > ${VLANS_DIR}/vlans-mysql.csv

    echo "Merge con vlans-def"
    cp ${VLANS_DIR}/vlans-def.csv  ${VLANS_DIR}/vlans.csv  
    cat ${VLANS_DIR}/vlans-mysql.csv | grep -v "Sottorete" | while read row; do 
	set $( echo $row | sed 's/:/ /g' )
	if grep '^'$1':' ${VLANS_DIR}/vlans.csv > /dev/null
	then
	    continue
	fi
	echo $row >> ${VLANS_DIR}/vlans.csv
    done
fi

if [ "$fase_cmdb" ]
then
    f_input=$CMDB_CSV
    f_output=${CMDB_DIR}/cmdb.csv

    echo "Converto CMDB"
    awk -F';' 'BEGIN { host=""; desc=""; ip="" }
               $1 != "" { host=$1; }
               $NF != "" { ip=$NF; }
               $2 != "" {
                   desc=$2;
                   for(n=3;n<NF;n++) desc=desc";"$n;   
               }
               { printf("%s;%s;%s\n"),host,ip,desc }' $f_input > $f_output
fi

function get_ad {
    local user="$1"
    local host="$2"
    local dir="$3"
    
    mkdir -p $dir
    $L_WINEXE -U "$user" '//'"$host" 'dnscmd /EnumZones' > $dir/dns.desc
    for zone_name in $( grep '^ ' $dir/dns.desc | \
	grep -v "Zone name" | \
	grep -v '^ _' | grep -v ' \.' | grep -v ' TrustAnchors' | \
	awk '{ print $1 }' )
    do
	echo $dir $zone_name
	$L_WINEXE -U "$user" '//'"$host" 'dnscmd /ZonePrint '"$zone_name" > $dir/"${zone_name}".txt
    done

}

if [ "$fase_download" ]
then
    set +e
    echo "Download Collaudo"
    get_ad "$COLLAUDO_USER" "$COLLAUDO_HOST" $WINDOWS_DIR/Collaudo

    echo "Download Intranet"
    get_ad "$INTRANET_USER" "$INTRANET_HOST" $WINDOWS_DIR/Intranet

    find $WINDOWS_DIR -type f -exec dos2unix {} \;

    echo "Download Linux"
    ssh $REM_USER@$REM_HOST rndc dumpdb -zones
    scp $REM_USER@$REM_HOST:/var/named/data/cache_dump.db $CACHE_DB
    set -e
fi

if [ "$fase_linux" ]
then
    grep -v '^$' $CACHE_DB | grep -v '^;$' | \
	awk 'BEGIN { view="NONE";zone="NONE" }
             $1 == ";" { if ($2=="Start") { view=$4; next }
                         if ($2=="Zone")  { zone=$5; next }
                         if ($2=="not" )  { printf("%s %s NOT\n",view,zone); next }
                       }
             { printf("%s %s %s\n",view,zone,$0); }' > ${LINUX_PREFIX}.linux

    grep NOT ${LINUX_PREFIX}.linux > ${LINUX_PREFIX}.linux_not
    grep -v NOT ${LINUX_PREFIX}.linux > ${LINUX_PREFIX}.linux_yes
fi 

if [ "$fase_windows" ]
then
    for f in $( find $WINDOWS_DIR -type f -a -name '*.txt' | grep -v '/Collaudo/' )
    do
    	b=$( basename $f )
    	case "$b" in
    	    "..txt"|"TrustAnchors.txt")
    		continue
    	esac
	zona=$( grep -E "^;[ ]+Zone:" $f | awk '{ print $3 }' )

	grep -v '^;' $f | grep -v '^$' | \
	    sed 's/;.*//g' | \
	    awk -f $L_WINDOWS_CONVERTI_AWK | sed 's/\[AGE:[0-9]*\]//g'  | sed 's/\[Aging:[0-9]*\]//g' | \
	    sed 's/^[ \t]/=== /g' | \
	    awk -v zona="$zona" -v view="windows" -f $L_WINDOWS_BONIFICA_AWK

    done > ${WINDOWS_PREFIX}.windows

    for f in $( find $WINDOWS_DIR -type f -a -name '*.txt' | grep '/Collaudo/' )
    do
	b=$( basename $f )
	case "$b" in
	    "..txt"|"TrustAnchors.txt")
		continue
	esac
	zona=$( grep -E "^;[ ]+Zone:" $f | awk '{ print $3 }' )

	grep -v '^;' $f | grep -v '^$' | \
	    sed 's/;.*//g' | \
	    awk -f $L_WINDOWS_CONVERTI_AWK | sed 's/\[AGE:[0-9]*\]//g'  | sed 's/\[Aging:[0-9]*\]//g' | \
	    sed 's/^[ \t]/=== /g' | \
	    awk -v zona="$zona" -v view="collaudo" -f $L_WINDOWS_BONIFICA_AWK
    done >> ${WINDOWS_PREFIX}.windows
fi


if [ "$fase_parse" ]
then
    for d in nuova_conf html
    do
	if [ -d "${OUT_DIR}/$d" ]
	then
	    rm -r "${OUT_DIR}/${d}"
	fi
	mkdir -p "${OUT_DIR}/${d}"
    done
    cat ${LINUX_PREFIX}.linux_yes ${WINDOWS_PREFIX}.windows > ${OUT_SPOOL}/elab.all

    $L_PARSE_VIEW ${OUT_SPOOL}/elab.all ${VLANS_DIR}/vlans.csv ${CMBD_DIR}/cmdb.csv ${OUT_DIR} ${OUT_LABEL}

    for h in $TARGET_HOSTS
    do
	echo "${h}:"
	echo "    ${OUT_DIR}/${OUT_LABEL}_html/ => ${TARGET_WWW}/${OUT_LABEL}_html/"
	rsync -aqPH ${OUT_DIR}/${OUT_LABEL}_html/ chiara-paci@${h}:${TARGET_WWW}/${OUT_LABEL}_html/
	echo "    ${OUT_DIR}/static/   => ${TARGET_WWW}/static/"
	rsync -aqPH ${OUT_DIR}/static/   chiara-paci@${h}:${TARGET_WWW}/static/
    done
fi


